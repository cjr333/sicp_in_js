/*
다음 함수는 애커만 함수(Ackermann’s function)라고 부르는 수학 함수를 계산한다.
function A(x, y) {
  return y === 0
         ? 0
         : x === 0
         ? 2 * y
         : y === 1
         ? 2
         : A(x - 1, A(x, y - 1));
}

다음 문장들은 각각 어떤 값으로 평가되는가?
A(1, 10); A(2, 4); A(3, 3);
 */

/*
1. A(1, 10)
   A(0, A(1, 9))
   A(0, A(0, A(1, 8)))
   A(0, A(0, A(0, A(1, 7))))
   A(0, A(0, A(0, A(0, A(1, 6)))))
   A(0, A(0, A(0, A(0, A(0, A(1, 5))))))
   A(0, A(0, A(0, A(0, A(0, A(0, A(1, 4)))))))
   A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(1, 3))))))))
   A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(1, 2)))))))))
   A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(1, 1))))))))))
   A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(0, 2)))))))))
   A(0, A(0, A(0, A(0, A(0, A(0, A(0, A(0, 4))))))))
   A(0, A(0, A(0, A(0, A(0, A(0, A(0, 8)))))))
   A(0, A(0, A(0, A(0, A(0, A(0, 16))))))
   A(0, A(0, A(0, A(0, A(0, 32)))))
   A(0, A(0, A(0, A(0, 64))))
   A(0, A(0, A(0, 128)))
   A(0, A(0, 256))
   A(0, 512)
   1024

2. A(2, 4)
   A(1, A(2, 3))
   A(1, A(1, A(2, 2)))
   A(1, A(1, A(1, A(2, 1))))
   A(1, A(1, A(1, 2)))
   A(1, A(1, A(0, A(1, 1))))
   A(1, A(1, A(0, 2)))
   A(1, A(1, 4))
   A(1, A(0, A(1, 3)))
   A(1, A(0, A(0, A(1, 2))))
   A(1, A(0, A(0, A(0, A(1, 1)))))
   A(1, A(0, A(0, A(0, 2))))
   A(1, A(0, A(0, 4)))
   A(1, A(0, 8))
   A(1, 16)
   ....

3. A(3, 3)
   A(2, A(3, 2))
   A(2, A(2, A(3, 1)))
   A(2, A(2, 2))
   A(2, A(1, A(2, 1)))
   A(2, A(1, 2))
   A(2, A(0, A(1, 1))
   A(2, A(0, 2))
   A(2, 4)
   ....
 */
function A(x, y) {
    return y === 0
        ? 0
        : x === 0
            ? 2 * y
            : y === 1
                ? 2
                : A(x - 1, A(x, y - 1));
}
console.log(A(1, 10));
console.log(A(2, 4));
console.log(A(3, 3));

/*
위의 함수 A를 이용해서 선언된 다음 함수들이 있다.
function f(n) {
  return A(0, n);
}
function g(n) {
  return A (1, n);
}
function h(n) {
  return A(2, n);
}
function k(n) {
  return 5 * n * n;
}
양의 정수 n에 대해 함수 f, g, h가 계산하는 함수를 각각 간결한 수식으로 표현하라. 예를 들 어 k(n)은 5n^2을 계산한다
f(n) = 2 * n
g(n) = 2 ^ n
h(n) = 2 ^ 2 ^ n
 */
