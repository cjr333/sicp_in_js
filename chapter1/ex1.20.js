/*
함수가 생성하는 과정은 당연히 해석기에 쓰이는 규칙들에 의존한다. 한 예로，앞에 나온 반복적 gcd 함수를 생각해 보자.
이 함수를 정상순서 평가(§1.1.5)로 해석한다고 가정한다. (조건부 표현식의 정상 순서 평가 규칙은 연습문제 1.5에서 설명했다.)
gcd(206, 40)의 평가로 생성되는 과정을 치환 모형(정상 순서에 대한)을 이용해서 묘사하되，실제로 수행된 remainder 연산들을 표시하라.
gcd(206, 40)의 정상 순서 평가에서 remainder 연산이 실제로 몇 번이 나 수행되는가? 적용적 순서 평가(인수 우선 평가)에서는 몇 번인가?

function gcd(a, b) {
  return b === 0 ? a : gcd(b, a % b);
}
 */

/*
1. 정상 순서
gcd(206, 40)
gcd(40, 206 % 40) => 함수 내 평가
gcd(6, 40 % 6) => 함수 내 평가
gcd(4, 6 % 4) => 함수 내 평가
gcd(2, 4 % 2) => 함수 내 평가


2. 인수 우선
gcd(206, 40)
gcd(40, 206 % 40) => 인자 평가
gcd(6, 40 % 6) => 인자 평가
gcd(4, 6 % 4) => 안자 평가
gcd(2, 4 % 2) => 인자 평가
 */
